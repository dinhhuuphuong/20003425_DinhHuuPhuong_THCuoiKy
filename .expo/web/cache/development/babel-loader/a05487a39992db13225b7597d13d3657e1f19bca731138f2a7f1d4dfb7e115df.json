{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { inputTypes, toHourInputFormat, toHourOutputFormat } from './timeUtils';\nimport AnalogClock from './AnalogClock';\nimport { circleSize } from './timeUtils';\nimport TimeInputs from './TimeInputs';\nimport { DisplayModeContext } from '../contexts/DisplayModeContext';\nfunction TimePicker(_ref) {\n  let {\n    hours,\n    minutes,\n    onFocusInput,\n    focused,\n    inputType,\n    onChange,\n    locale,\n    use24HourClock,\n    inputFontSize\n  } = _ref;\n  const [displayMode, setDisplayMode] = React.useState(undefined);\n  const dimensions = useWindowDimensions();\n  const isLandscape = dimensions.width > dimensions.height;\n  const is24Hour = React.useMemo(() => {\n    if (use24HourClock !== undefined) {\n      return use24HourClock;\n    }\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC'\n    });\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)));\n    return formatted.includes('23');\n  }, [locale, use24HourClock]);\n  React.useEffect(() => {\n    if (hours >= 12) {\n      setDisplayMode('PM');\n    } else {\n      setDisplayMode('AM');\n    }\n  }, []);\n  const onInnerChange = React.useCallback(params => {\n    params.hours = toHourOutputFormat(params.hours, hours, is24Hour);\n    onChange(params);\n  }, [onChange, hours, is24Hour]);\n  return React.createElement(DisplayModeContext.Provider, {\n    value: {\n      mode: displayMode,\n      setMode: setDisplayMode\n    }\n  }, React.createElement(View, {\n    style: isLandscape ? [styles.rootLandscape, {\n      width: 24 * 3 + 96 * 2 + 52 + (inputType === inputTypes.picker ? circleSize : -circleSize)\n    }] : styles.rootPortrait\n  }, React.createElement(TimeInputs, {\n    inputType: inputType,\n    inputFontSize: inputFontSize,\n    hours: hours,\n    minutes: minutes,\n    is24Hour: is24Hour,\n    onChange: onChange,\n    onFocusInput: onFocusInput,\n    focused: focused\n  }), inputType === inputTypes.picker ? React.createElement(View, {\n    style: styles.clockContainer\n  }, React.createElement(AnalogClock, {\n    hours: toHourInputFormat(hours, is24Hour),\n    minutes: minutes,\n    focused: focused,\n    is24Hour: is24Hour,\n    onChange: onInnerChange\n  })) : null));\n}\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  rootPortrait: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  clockContainer: {\n    paddingTop: 36,\n    paddingLeft: 12,\n    paddingRight: 12\n  }\n});\nexport default React.memo(TimePicker);","map":{"version":3,"names":["React","View","StyleSheet","useWindowDimensions","inputTypes","toHourInputFormat","toHourOutputFormat","AnalogClock","circleSize","TimeInputs","DisplayModeContext","TimePicker","_ref","hours","minutes","onFocusInput","focused","inputType","onChange","locale","use24HourClock","inputFontSize","displayMode","setDisplayMode","useState","undefined","dimensions","isLandscape","width","height","is24Hour","useMemo","formatter","Intl","DateTimeFormat","hour","minute","timeZone","formatted","format","Date","UTC","includes","useEffect","onInnerChange","useCallback","params","createElement","Provider","value","mode","setMode","style","styles","rootLandscape","picker","rootPortrait","clockContainer","create","flexDirection","alignItems","justifyContent","paddingTop","paddingLeft","paddingRight","memo"],"sources":["C:\\Users\\LAPTOP HUU PHUONG\\Desktop\\THcuoiky_react\\THcuoiky\\BaiTapReactNativeTuan7Bai1-master\\node_modules\\react-native-paper-dates\\src\\Time\\TimePicker.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock from './AnalogClock'\nimport { circleSize } from './timeUtils'\nimport TimeInputs from './TimeInputs'\nimport { DisplayModeContext } from '../contexts/DisplayModeContext'\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n  use24HourClock,\n  inputFontSize,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n  use24HourClock?: boolean\n  inputFontSize?: number\n}) {\n  const [displayMode, setDisplayMode] = React.useState<'AM' | 'PM' | undefined>(\n    undefined\n  )\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    if (use24HourClock !== undefined) {\n      return use24HourClock\n    }\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale, use24HourClock])\n\n  // Initialize display Mode according the hours value\n  React.useEffect(() => {\n    if (hours >= 12) {\n      setDisplayMode('PM')\n    } else {\n      setDisplayMode('AM')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <DisplayModeContext.Provider\n      value={{ mode: displayMode, setMode: setDisplayMode }}\n    >\n      <View\n        style={\n          isLandscape\n            ? [\n                styles.rootLandscape,\n                {\n                  width:\n                    24 * 3 +\n                    96 * 2 +\n                    52 +\n                    (inputType === inputTypes.picker\n                      ? circleSize\n                      : -circleSize),\n                },\n              ]\n            : styles.rootPortrait\n        }\n      >\n        <TimeInputs\n          inputType={inputType}\n          inputFontSize={inputFontSize}\n          hours={hours}\n          minutes={minutes}\n          is24Hour={is24Hour}\n          onChange={onChange}\n          onFocusInput={onFocusInput}\n          focused={focused}\n        />\n        {inputType === inputTypes.picker ? (\n          <View style={styles.clockContainer}>\n            <AnalogClock\n              hours={toHourInputFormat(hours, is24Hour)}\n              minutes={minutes}\n              focused={focused}\n              is24Hour={is24Hour}\n              onChange={onInnerChange}\n            />\n          </View>\n        ) : null}\n      </View>\n    </DisplayModeContext.Provider>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  rootPortrait: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}