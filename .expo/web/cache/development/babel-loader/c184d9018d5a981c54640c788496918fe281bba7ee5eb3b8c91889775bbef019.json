{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"inputButton\", \"onChangeText\", \"onChange\", \"value\", \"mask\", \"disabled\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { TextInput } from 'react-native-paper';\nconst splitCharacters = ['-', '/', '.', '年', ' '];\nfunction detectCharacter(mask) {\n  const c = splitCharacters.find(ch => mask.includes(ch));\n  return c || '';\n}\nfunction escapeForRegExp(value) {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction TextInputWithMask(_ref, ref) {\n  let {\n      inputButton,\n      onChangeText,\n      onChange,\n      value,\n      mask,\n      disabled\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [controlledValue, setControlledValue] = React.useState(value || '');\n  const onInnerChange = text => {\n    const splitCharacter = detectCharacter(mask);\n    const maskParts = mask.split(splitCharacter);\n    let trimmedText = text.trim();\n    const format = maskParts[0].toLowerCase() + splitCharacter + maskParts[1].toLowerCase() + splitCharacter + maskParts[2].toLowerCase();\n    const match = new RegExp(format.replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*').replace(/m|d|y/g, '\\\\d'));\n    const replaceValue = format.match(/\\W/);\n    const replace = `$1${splitCharacter}$2${splitCharacter}$3$4`.replace(new RegExp(escapeForRegExp(splitCharacter), 'g'), replaceValue ?? '');\n    const isBackSpace = controlledValue.length > trimmedText.length;\n    if (!isBackSpace) {\n      trimmedText = trimmedText.replace(/(^|\\W)(?=\\d\\W)/g, '$10').replace(match, replace).replace(/(\\W)+/g, '$1');\n    }\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText);\n    }\n    setControlledValue(trimmedText);\n  };\n  React.useEffect(() => {\n    setControlledValue(value || '');\n  }, [value]);\n  return React.createElement(TextInput, _extends({\n    ref: ref\n  }, rest, {\n    disabled: disabled,\n    value: controlledValue,\n    onChangeText: onInnerChange,\n    onChange: e => {\n      onChange && onChange(e);\n    },\n    maxLength: 10,\n    right: inputButton\n  }));\n}\nexport default React.forwardRef(TextInputWithMask);","map":{"version":3,"names":["React","TextInput","splitCharacters","detectCharacter","mask","c","find","ch","includes","escapeForRegExp","value","replace","TextInputWithMask","_ref","ref","inputButton","onChangeText","onChange","disabled","rest","_objectWithoutPropertiesLoose","_excluded","controlledValue","setControlledValue","useState","onInnerChange","text","splitCharacter","maskParts","split","trimmedText","trim","format","toLowerCase","match","RegExp","replaceValue","isBackSpace","length","useEffect","createElement","_extends","e","maxLength","right","forwardRef"],"sources":["C:\\Users\\LAPTOP HUU PHUONG\\Desktop\\THcuoiky_react\\THcuoiky\\BaiTapReactNativeTuan7Bai1-master\\node_modules\\react-native-paper-dates\\src\\TextInputMask.tsx"],"sourcesContent":["import * as React from 'react'\nimport { TextInput } from 'react-native-paper'\n\nconst splitCharacters = ['-', '/', '.', '年', ' ']\nfunction detectCharacter(mask: string): string {\n  const c = splitCharacters.find((ch) => mask.includes(ch))\n  return c || ''\n}\n\nfunction escapeForRegExp(value: string): string {\n  return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nfunction TextInputWithMask(\n  {\n    inputButton,\n    onChangeText,\n    onChange,\n    value,\n    mask,\n    disabled,\n    ...rest\n  }: React.ComponentProps<typeof TextInput> & {\n    mask: string\n    value: string\n    inputButton: React.ReactNode\n  },\n  ref: any\n) {\n  const [controlledValue, setControlledValue] = React.useState<string>(\n    value || ''\n  )\n\n  const onInnerChange = (text: string) => {\n    const splitCharacter = detectCharacter(mask)\n    const maskParts = mask.split(splitCharacter)\n\n    let trimmedText = text.trim()\n    const format =\n      maskParts[0].toLowerCase() +\n      splitCharacter +\n      maskParts[1].toLowerCase() +\n      splitCharacter +\n      maskParts[2].toLowerCase()\n    const match = new RegExp(\n      format\n        .replace(/(\\w+)\\W(\\w+)\\W(\\w+)/, '^\\\\s*($1)\\\\W*($2)?\\\\W*($3)?([0-9]*).*')\n        .replace(/m|d|y/g, '\\\\d')\n    )\n    const replaceValue = format.match(/\\W/)\n    const replace = `$1${splitCharacter}$2${splitCharacter}$3$4`.replace(\n      new RegExp(escapeForRegExp(splitCharacter), 'g'),\n      (replaceValue ?? '') as string\n    )\n\n    const isBackSpace = controlledValue.length > trimmedText.length\n\n    if (!isBackSpace) {\n      trimmedText = trimmedText\n        .replace(/(^|\\W)(?=\\d\\W)/g, '$10')\n        .replace(match, replace)\n        .replace(/(\\W)+/g, '$1')\n    }\n\n    if (trimmedText.length === mask.length) {\n      onChangeText && onChangeText(trimmedText)\n    }\n\n    setControlledValue(trimmedText)\n  }\n\n  React.useEffect(() => {\n    setControlledValue(value || '')\n  }, [value])\n\n  return (\n    <TextInput\n      ref={ref}\n      {...rest}\n      disabled={disabled}\n      value={controlledValue}\n      onChangeText={onInnerChange}\n      onChange={(e) => {\n        onChange && onChange(e)\n      }}\n      maxLength={10}\n      right={inputButton}\n    />\n  )\n}\n\nexport default React.forwardRef(TextInputWithMask)\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}